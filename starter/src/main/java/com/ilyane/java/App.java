/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ilyane.java;

import java.awt.Menu;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

import org.bson.Document;

import com.mongodb.BasicDBObject;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoIterable;
import com.mongodb.client.MongoCollection;

public class App {
    public String getGreeting() {
    	
       return "Hello world.";
    } 

    public static void main(String[] args) throws Exception {  
        System.out.println(new App().getGreeting());
        
        String host = "";
        int port = 0;
    	
        for(int i = 0 ; i < args.length ; i++)
        {
        	if (args[i].equals("--db"))
        	{
                if (i + 1 < args.length && !args[i + 1].startsWith("--"))
                {
                }
                else
                {
                  throw new Exception("--db not defined");
                }
            }
        	
        	if (args[i].equals("--host"))
        	{
                if (i + 1 < args.length && !args[i + 1].startsWith("--"))
                {
                	host = args[i+1];
                }
                else
                {
                	throw new Exception("--host not defined");
                }
            }
        	
        	if (args[i].equals("--port"))
        	{
                if (i + 1 < args.length && !args[i + 1].startsWith("--"))
                {
                	String portString = args[i+1];
                	port = Integer.parseInt(portString);
                	
                }
                else
                {
                	throw new Exception("--port not defined");
                }
            }
        }
        
        MongoClient mongoClient = getMongoClient(host, port);
        
        MongoDatabase database1 = mongoClient.getDatabase("database");
        
        MongoIterable <String> collections = database1.listCollectionNames();
        
        for (String collectionNames: collections)
        {
            System.out.println(collectionNames);
        }
        
        boolean choose = false;
        
        String chooseCollection = "";
        
    	Scanner sc = new Scanner(System.in);
    	
    	while(!choose)
        {
            System.out.println("Choisir une collection, ou mettre 'fin' :");
            chooseCollection = sc.nextLine();
            
            for (String collectionNames: collections)
            {
                if(chooseCollection.equals(collectionNames))
                {
                    System.out.println("Choisi : " + chooseCollection);
                    choose = true;
                }
                else if(chooseCollection.equals("fin"))
                {
                	System.out.println("fin");
                	choose = true;
                }
                else
                {
                	System.out.println("Vous ne pouvez pas choisir de collection.");
                	choose = false;
                }
            }
        }
        
    	MongoCollection<Document> collection = database1.getCollection(chooseCollection);
        
    	choose = false;
    	
    	while(!choose)
        {
            System.out.println("Taper 'rechercher un document', ou 'insérer un document', ou 'fin'.");
             String choix = sc.nextLine();
            
            	if(choix.equals("rechercher un document"))
                {
                    System.out.println("Choisi de rechercher un document");
                    choose = true;
                }
                else if(chooseCollection.equals("insérer un document"))
                {
                	System.out.println("Choisi d'insérer un document");
                	choose = true;
                }
                else if(chooseCollection.equals("fin"))
                {
                	System.out.println("fin");
                	choose = true;
                }
                else
                {
                	System.out.println("Choix n'existe pas.");
                	choose = false;
                } 

        }
    }
    	
        public static MongoClient getMongoClient(final String host, final int port)
        {
        MongoClient mongoClient = MongoClients.create(
                MongoClientSettings.builder()
                        .applyToClusterSettings(builder ->
                                builder.hosts(Arrays.asList(new ServerAddress(host, port))))
                        .build());
        return mongoClient;
     
    	
    	 
    }
        
        
        public void searchDocument(MongoCollection<Document> collection)
    	{
    		FindIterable<Document> documents = collection.find();
    		ArrayList<String> availableKeys = new ArrayList<>();;
    		
    		for(Document doc : documents)
    		{
    			for(String key : doc.keySet())
    			{
    				if(availableKeys.contains(key))
    				{
    					availableKeys.add(key);
    					System.out.println(key);
    				}
    			}
    		}
    		
    		Scanner sc = new Scanner(System.in);
    		
    		boolean choose = false;
    		String chooseField = "";
    		
    		while(!choose)
            {
    			chooseField = sc.nextLine();

    			if(availableKeys.contains(chooseField))
    			{
    				System.out.printf("Vous avez choisi %s.", chooseField);
    				choose = true;
    			}
    			else
    			{
    				System.out.println("Le champ choisi n'existe pas. Veuillez réessayer.");
    				choose = false;
    			}
            }
    		
    		choose = false;
    		String chooseOperators = "";
    		
    		String operators [] = {"inf", "inf egal", "sup", "sup egal", "egal", "true", "false"};
    		
    		System.out.println("Veuillez choisir un opérateur parmis ceux ci-dessous :");
    		
    		for(int i = 0 ; i < operators.length ; i++)
    		{
    			System.out.printf("%s \n", operators[i]);
    		}
    		
        	chooseOperators = sc.nextLine();
        	
        	String Operators = "";
        	
        			if(chooseOperators.equals("inf"))
        	    	{
        	    		Operators = "$lt";
        	    	}
        	    	
        	    	if(chooseOperators.equals("inf egal"))
        	    	{
        	    		Operators = "$lte";
        	    	}
        	    	
        	    	if(chooseOperators.equals("sup"))
        	    	{
        	    		Operators = "$gt";
        	    	}
        	    	
        	    	if(chooseOperators.equals("sup egal"))
        	    	{
        	    		Operators = "$gte";
        	    	}
        	 
        	System.out.println("Quelle est la valeur avec laquelle vous souhaitez comparer ?");
        	
        	String Compare = "";
        	
        	BasicDBObject query = null;
	    	
        	if(!operators.equals("egal") || !operators.equals("true") || !operators.equals("false"))
        	{
        		query = new BasicDBObject(chooseField,
                        new BasicDBObject(operators, compare));
        	}
        	else
        	{
        		if(operators.equals("egal"))
        		{
        			
        		}
        		else if(operators.equals("true"))
        		{
        			
        		}
        		else if(operators.equals("false"))
        		{
        			
        		}
        	}
        	
        	FindIterable<Document> resultats = collection.find(query);
        	
        	System.out.println("Recherche en cours...");
        	
        	for(Document result : resultats)
    		{
    			System.out.println(resultats);
    			
    		}

        }
    	
    	public void insertDocument(MongoCollection<Document> collection)
    	{
    		FindIterable<Document> documents = collection.find();
    		ArrayList<String> availableKeys = new ArrayList<>();;
    		
            
    		String insert = "Insert";

            for(Document doc : documents)
            	
            	if (result.equals(insert)) {
                insertDocument(collection);
            } 		else if (insertDocument("Continue to insert ?").equals("yes")) {
                    insertDocument(collection);
                }  
        	
        }
} 
