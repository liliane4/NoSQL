/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.ilyane.java;

import java.util.Arrays;
import java.util.Scanner;

import org.bson.Document;

//import com.mongodb.ConnectionString;
import com.mongodb.MongoClientSettings;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.MongoIterable;
import com.mongodb.client.MongoCollection;

public class App {
    public String getGreeting() {
    	
       return "Hello world.";
    } 

    public static void main(String[] args) {  
        System.out.println(new App().getGreeting());
        
        String database = "";
        String host = "";
        int port = 0;
    	
        for(int i = 0 ; i < args.length ; i++)
        {
        	if (args[i].equals("--db"))
        	{
                if (i + 1 < args.length && !args[i + 1].startsWith("--"))
                {
                  database = args[i+1];
                }
                else
                {
                  throw new Exception("--db not defined");
                }
            }
        	
        	if (args[i].equals("--host"))
        	{
                if (i + 1 < args.length && !args[i + 1].startsWith("--"))
                {
                	host = args[i+1];
                }
                else
                {
                	throw new Exception("--host not defined");
                }
            }
        	
        	if (args[i].equals("--port"))
        	{
                if (i + 1 < args.length && !args[i + 1].startsWith("--"))
                {
                	String portString = args[i+1];
                	port = Integer.parseInt(portString);
                	
                }
                else
                {
                	throw new Exception("--port not defined");
                }
            }
        }
        
        MongoClient mongoClient = getMongoClient(host, port);
        
        MongoDatabase database = mongoClient.getDatabase("database");
        
        MongoIterable <String> collections = database.listCollectionNames();
        
        for (String collectionNames: collections)
        {
            System.out.println(collectionNames);
        }
        
        boolean choose = false;
        
        String chooseCollection = "";
        
    	Scanner sc = new Scanner(System.in);
    	
    	while(!choose)
        {
            System.out.println("Choisir une collection, ou mettre 'fin' :");
            chooseCollection = sc.nextLine();
            
            for (String collectionNames: collections)
            {
                if(chooseCollection.equals(collectionNames))
                {
                    System.out.println("Choisi : " + chooseCollection);
                    choose = true;
                }
                else if(chooseCollection.equals("fin"))
                {
                	System.out.println("fin");
                	choose = true;
                }
                else
                {
                	System.out.println("Vous ne pouvez pas choisir de collection.");
                	choose = false;
                }
            }
        }
        
    	MongoCollection<Document> collection = database.getCollection(chooseCollection);
        
    	choose = false;
    	
    	while(!choose)
        {
            System.out.println("Taper 'rechercher un document', ou 'insérer un document', ou 'fin'.");
             String choix = sc.nextLine();
            
            	if(choix.equals("rechercher un document"))
                {
                    System.out.println("Choisi de rechercher un document");
                    choose = true;
                }
                else if(chooseCollection.equals("insérer un document"))
                {
                	System.out.println("Choisi d'insérer un document");
                	choose = true;
                }
                else if(chooseCollection.equals("fin"))
                {
                	System.out.println("fin");
                	choose = true;
                }
                else
                {
                	System.out.println("Choix n'existe pas.");
                	choose = false;
                } 

        }
    }
    	
        public static MongoClient getMongoClient(final String host, final int port)
        {
        MongoClient mongoClient = MongoClients.create(
                MongoClientSettings.builder()
                        .applyToClusterSettings(builder ->
                                builder.hosts(Arrays.asList(new ServerAddress(host, port))))
                        .build());
        return mongoClient;
     
    	
    	 
    }
} 
